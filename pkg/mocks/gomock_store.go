// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mehdy/twixter/pkg/interactors (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/mehdy/twixter/pkg/entities"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddFollowers mocks base method
func (m *MockStore) AddFollowers(arg0 *entities.TwitterProfile, arg1 []*entities.TwitterProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollowers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollowers indicates an expected call of AddFollowers
func (mr *MockStoreMockRecorder) AddFollowers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowers", reflect.TypeOf((*MockStore)(nil).AddFollowers), arg0, arg1)
}

// AddFollowings mocks base method
func (m *MockStore) AddFollowings(arg0 *entities.TwitterProfile, arg1 []*entities.TwitterProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollowings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollowings indicates an expected call of AddFollowings
func (mr *MockStoreMockRecorder) AddFollowings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowings", reflect.TypeOf((*MockStore)(nil).AddFollowings), arg0, arg1)
}

// GetFollowers mocks base method
func (m *MockStore) GetFollowers(arg0 string) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowers", arg0)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowers indicates an expected call of GetFollowers
func (mr *MockStoreMockRecorder) GetFollowers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowers", reflect.TypeOf((*MockStore)(nil).GetFollowers), arg0)
}

// GetFollowings mocks base method
func (m *MockStore) GetFollowings(arg0 string) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowings", arg0)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowings indicates an expected call of GetFollowings
func (mr *MockStoreMockRecorder) GetFollowings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowings", reflect.TypeOf((*MockStore)(nil).GetFollowings), arg0)
}

// GetProfile mocks base method
func (m *MockStore) GetProfile(arg0 string) (*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockStoreMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockStore)(nil).GetProfile), arg0)
}

// GetTopFollowedByFollowers mocks base method
func (m *MockStore) GetTopFollowedByFollowers(arg0 string, arg1 bool, arg2 int) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFollowedByFollowers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFollowedByFollowers indicates an expected call of GetTopFollowedByFollowers
func (mr *MockStoreMockRecorder) GetTopFollowedByFollowers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFollowedByFollowers", reflect.TypeOf((*MockStore)(nil).GetTopFollowedByFollowers), arg0, arg1, arg2)
}

// GetTopFollowedByFollowings mocks base method
func (m *MockStore) GetTopFollowedByFollowings(arg0 string, arg1 bool, arg2 int) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFollowedByFollowings", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFollowedByFollowings indicates an expected call of GetTopFollowedByFollowings
func (mr *MockStoreMockRecorder) GetTopFollowedByFollowings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFollowedByFollowings", reflect.TypeOf((*MockStore)(nil).GetTopFollowedByFollowings), arg0, arg1, arg2)
}

// GetTopFollowersByFollowers mocks base method
func (m *MockStore) GetTopFollowersByFollowers(arg0 string, arg1 int) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFollowersByFollowers", arg0, arg1)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFollowersByFollowers indicates an expected call of GetTopFollowersByFollowers
func (mr *MockStoreMockRecorder) GetTopFollowersByFollowers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFollowersByFollowers", reflect.TypeOf((*MockStore)(nil).GetTopFollowersByFollowers), arg0, arg1)
}

// GetTopFollowingsByFollowers mocks base method
func (m *MockStore) GetTopFollowingsByFollowers(arg0 string, arg1 int) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFollowingsByFollowers", arg0, arg1)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFollowingsByFollowers indicates an expected call of GetTopFollowingsByFollowers
func (mr *MockStoreMockRecorder) GetTopFollowingsByFollowers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFollowingsByFollowers", reflect.TypeOf((*MockStore)(nil).GetTopFollowingsByFollowers), arg0, arg1)
}

// GetVerifiedFollowers mocks base method
func (m *MockStore) GetVerifiedFollowers(arg0 string) ([]*entities.TwitterProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifiedFollowers", arg0)
	ret0, _ := ret[0].([]*entities.TwitterProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedFollowers indicates an expected call of GetVerifiedFollowers
func (mr *MockStoreMockRecorder) GetVerifiedFollowers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedFollowers", reflect.TypeOf((*MockStore)(nil).GetVerifiedFollowers), arg0)
}

// SaveProfile mocks base method
func (m *MockStore) SaveProfile(arg0 *entities.TwitterProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProfile indicates an expected call of SaveProfile
func (mr *MockStoreMockRecorder) SaveProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockStore)(nil).SaveProfile), arg0)
}

// SaveProfiles mocks base method
func (m *MockStore) SaveProfiles(arg0 []*entities.TwitterProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProfiles indicates an expected call of SaveProfiles
func (mr *MockStoreMockRecorder) SaveProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfiles", reflect.TypeOf((*MockStore)(nil).SaveProfiles), arg0)
}
